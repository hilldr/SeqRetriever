* Useful operations
**  Install from Github
#+BEGIN_SRC R :session *R* :eval yes
library(devtools)
devtools::install_github("hilldr/SeqRetriever/SeqRetriever")
#+END_SRC

#+RESULTS:
: TRUE

** Process package documentation
#+BEGIN_SRC R :session *R* :eval yes
wd <- getwd()
if (wd != "/home/david/development/SeqRetriever/SeqRetriever"){
  setwd("/home/david/development/SeqRetriever/SeqRetriever")
} else {
  print("Already in the SeqRetriever working directory")
}
file.remove("NAMESPACE")
library(roxygen2)
library(devtools)
document()
#+END_SRC

#+RESULTS:

** Install latest version from local source
#+BEGIN_SRC R :session *R* :eval yes
library(devtools)
setwd("..")
install("SeqRetriever")
#+END_SRC

#+RESULTS:
: TRUE

** Uninstall SeqRetriever
#+BEGIN_SRC R :session *R* :eval yes
remove.packages("SeqRetriever")
#+END_SRC

#+RESULTS:

** Convert Org-mode to github markdown
#+begin_src sh
pandoc --from=org --to=markdown -o README.md SeqRetriever.org 
#+end_src

#+RESULTS:

#+begin_src ditaa :file ./img/workflow.png :cmdline -E
+-------------+   +------------------+   +---------------------------+
+ FASTQ files +-->+ Tophat/Cufflinks +-->+ Cuffnorm output directory +--\
+-------------+   +------------------+   +---------------------------+  |
/-----------------------------------------------------------------------/
|
V
+---------------------------------------+
+ Format R dataframe with SeqDataframe()|
+-----------------+---------------------+
                  |
                  V
+-----------------+--------------------------+
| Retrieve genes of interest with SeqGenes() |
+-----------------+--------------------------+
                  |
                  V
+-----------------+-----------------------------+
| Subset genes bases on statistical significance|
: with SeqStatSubset()                          :
+-----------------+-----------------------------+
                  |
                  |   +----------------------------------+
                  +-->+ Output Boxplots with SeqBoxplot()|
                  |   +----------------------------------+
                  |   +---------------------------------+
                  +-->+ Output Heatmap with SeqHeatmap()|
                  |   +---------------------------------+
                  |   +--------------------------------------------+
                  +-->+ Output CSV with P values with SeqStudents()|
                      +--------------------------------------------+
#+end_src

#+RESULTS:
[[file:./img/workflow.png]]

** Benchmarking SeqDataframe
#+begin_src R :session *R* :results text :exports none :eval yes
library(profvis)
source("/home/david/development/SeqRetriever/SeqRetriever/R/SeqDataframe.R")
test <- profvis({    
   slo <- SeqDataframe(dir = "/home/david/Data/RNAseq/HIO_RNAseq/HIO_Ecoli_ES/RESULTS/norm_out")
})
#+end_src

#+RESULTS:

11200 ms
Replace plyr with dplyr
970 ms
Replace read.table with readr::read_delim
380 ms


** Validate results
#+begin_src R :session *R* :exports none :results graphics :file figure.png :width 1000 :height 1000 :eval yes
source("/home/david/development/SeqRetriever/SeqRetriever/R/SeqDataframe.R")
source("/home/david/development/SeqRetriever/SeqRetriever/R/SeqBoxplot.R")
source("/home/david/development/SeqRetriever/SeqRetriever/R/SeqGenes.R")
source("/home/david/development/SeqRetriever/SeqRetriever/R/SeqStatSubset.R")
source("/home/david/development/SeqRetriever/SeqRetriever/R/SeqStudents.R")
source("/home/david/development/SeqRetriever/SeqRetriever/R/SeqHeatmap.R")

plot <- SeqBoxplot(SeqStatSubset(SeqGenes(gene.names = c("DUOX1","DUOX2","DUOXA2","REG3G","SAA1","NOS2","IL22","CCL20","CXCL1"),
                                          df = SeqDataframe(dir = "/home/david/Data/RNAseq/HIO_RNAseq/HIO_Ecoli_ES/RESULTS/HIO_norm_out")),
                                 group1 = "Ctl", group2 = "Ecoli"))
print(plot)
#+end_src

#+RESULTS:
[[file:figure.png]]

** Benchmarking SeqDataframe
#+begin_src R :session *R* :results silent :exports none :eval yes
library(profvis)
library(SeqRetriever)
SeqStudents2 <- function(data,
                        group1 = "ES",
                        group2 = "HLO"){
    
    # Define the two sample groups
    gp1 <- grep(group1,colnames(data))
    gp2 <- grep(group2,colnames(data))
    # Calculate mean by sample group
    library(matrixStats)
    data[paste("Mean_",group1,sep="")] <- rowMeans(data[,gp1],na.rm=T)
    data[paste("Mean_",group2,sep="")] <- rowMeans(data[,gp2],na.rm=T)
    # Calculate log2 expression 
    data[paste("log2_",group1,"_ovr_",group2,sep="")] <- log2(data[paste("Mean_",group1,sep="")]/data[paste("Mean_",group2,sep="")])
    ## function to compare by row, returns t distribution
    ## The function is defined as
    # http://www.inside-r.org/packages/cran/metaMA/docs/row.ttest.stat
    row.t <- function(mat1,mat2){
        mat1 <- as.matrix(mat1)
        mat2 <- as.matrix(mat2)
        n1 <- dim(mat1)[2]
        n2 <- dim(mat2)[2] 
        n <- n1+n2 
        m1 <- rowMeans(mat1,na.rm=TRUE) 
        m2 <- rowMeans(mat2,na.rm=TRUE) 
        v1 <- rowVars(mat1,na.rm=TRUE) 
        v2 <- rowVars(mat2,na.rm=TRUE) 
        vpool <- (n1-1)/(n-2)*v1 + (n2-1)/(n-2)*v2 
        tstat <- sqrt(n1*n2/n)*(m1-m2)/sqrt(vpool) 
        return(tstat)
    }
    # calculate t-distribution for group1 vs. group2
    data$tstat <- row.t(data[,gp1],data[,gp2])
    # calculate degrees of freedom
    degfree <- (length(gp1)+length(gp2))-2
    # express t-dist as two-sided p-value
    data$p <- 2*pt(-abs(data$tstat),df=degfree)
    # calculate Bonferroni correction
    data$Bonf_p <- p.adjust(data$p, method = 'bonferroni', n = length(data$p))
    # sort based on p-value
#    data <- data[order(data$p),]
    return(data)
}
slo <- SeqDataframe(dir = "/home/david/Data/RNAseq/HIO_RNAseq/HIO_Ecoli_ES/RESULTS/norm_out")
test <- profvis({
    results <- SeqStudents(slo, group1 = "Ctl", group2 = "Ecoli")
})
test2 <- profvis({
    results2 <- SeqStudents2(slo, group1 = "Ctl", group2 = "Ecoli")
})
all.equal(results$p, results2$p)
# this works
# p <- apply(x,1, function(x) {t.test(as.numeric(x[2:4]),as.numeric(x[5:7]))$p.value})
#cluster <- makePSOCKcluster(detectCores())
#p <- parApply(cl = cluster,x,1, function(x) {t.test(as.numeric(x[2:4]),as.numeric(x[5:7]))$p.value})
# apply 6920 ms
# parApply 340 ms
# SeqStudents 10 ms
#+end_src

#+begin_src R :session *R* :exports code :eval yes
mst <- read.csv("mst.csv", header = TRUE, stringsAsFactors = FALSE)
get_matrices <- function(df){
    get_groups <- function(df){		
        names <- unique(gsub("\\_[0-9]*$", "",colnames(df)[grep("gene", colnames(df),invert = TRUE)]))
        list <- lapply(names, function(names) {grep(names, colnames(df))})
        list[[length(list)+1]] <- grep("gene", colnames(df),invert = TRUE)
        return(list)
    }
    x <- get_groups(df)
    matrices <- sapply(x, function(x){df[,x]})
    return(matrices)
}
test <- get_matrices(mst)
test2 <- test[-length(test)]
sst.1 <- lapply(test2, function(test2){rowSums((test2), na.rm = TRUE)})
sst.2 <- lapply(test2, function(test2){rowSums((test2^2), na.rm = TRUE)})
sst.1 <- data.frame(matrix(unlist(sst.1), nrow=unique(sapply(sst.1, length)), byrow=FALSE))
sst.2 <- data.frame(matrix(unlist(sst.2), nrow=unique(sapply(sst.2, length)), byrow=FALSE))
get_sst <- function(sst.1,sst.2, df){
    sst <- rowSums(sst.2) - (rowSums(sst.1)^2)/length(unique(colnames(df)[grep("gene", colnames(df),invert = TRUE)]))
    return(sst)
}
sst <- get_sst(sst.1,sst.2, mst)
ssa <- rowSums((sst.1^2)/unlist(lapply(test2, function(x) length(x)))) -  (rowSums(sst.1)^2)/length(unique(colnames(mst)[grep("gene", colnames(mst),invert = TRUE)]))
ssw <- sst - ssa
# https://people.richland.edu/james/lecture/m170/ch13-1wy.html
fstat <- (ssa/(length(test2)-1))/(ssw/(length(unique(colnames(mst)[grep("gene", colnames(mst),invert = TRUE)]))-length(test2)))
# correct to this point
# http://web.mst.edu/~psyworld/anovaexample.htm
# express f-statistic as p-value
anova.p <- pf(fstat, length(test2)-1, (length(unique(colnames(mst)[grep("gene", colnames(mst),invert = TRUE)]))-length(test2)), lower.tail = FALSE)
anova.p.adj <- p.adjust(anova.p, method = 'bonferroni', n = length(anova.p))
#+end_src

#+RESULTS:
| 0.0908794007321155 |
|  0.338219352990119 |

#+begin_src R :tangle mst.csv :exports none
gene_short_name,Constant_0,Constant_1,Constant_2,Constant_3,Constant_4,Constant_5,Constant_6,Constant_7,Random_0,Random_1,Random_2,Random_3,Random_4,Random_5,Random_6,Random_7,None_0,None_1,None_2,None_3,None_4,None_5,None_6,None_7
test,7,4,6,8,6,6,2,9,5,5,3,4,4,7,2,2,2,4,7,1,2,1,5,5
test2,7,4,6,8,6,6,2,9,5,5,3,4,4,7,2,2,2,4,7,1,2,1,100,100
#+end_src

#+begin_src R :session *R* :exports none :eval yes
library(profvis)
library(SeqRetriever)
source("/home/david/development/SeqRetriever/SeqRetriever/R/SeqDataframe.R")
source("/home/david/development/SeqRetriever/SeqRetriever/R/SeqANOVA.R")
n <- profvis({
    d <- SeqDataframe("/home/david/Data/RNAseq/HIO_RNAseq/HIO_Ecoli_ES/RESULTS/norm_out")
    x <- SeqANOVA(d)
})
## 30 ms
#+end_src

#+RESULTS:
